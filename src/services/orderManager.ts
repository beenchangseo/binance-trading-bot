import {Order} from '../types';
import {tradingConfig} from '../config/tradingConfig';
import {marketState, tradingState} from '../state/tradingState';
import {createOrder, getDynamicTradeAmount, simulateSlippage} from '../utils/orderUtils';

export const placeGridOrders = (price: number, simulationTime: number): void => {
    try {
        if (!price) {
            console.log(`price: ${price}`);
            return;
        }

        const dynamicAmount = getDynamicTradeAmount();
        const gridStep =
            tradingConfig.BASE_GRID_STEP + (marketState.currentATR * tradingConfig.VOLATILITY_MULTIPLIER) / 2;
        const bandRange = marketState.upperBand - marketState.lowerBand;
        const normalizedPosition = bandRange > 0 ? (price - marketState.lowerBand) / bandRange : 0.5;

        // Î°± Ï£ºÎ¨∏ Î∞∞Ïπò
        if (
            (marketState.trendDirection === 'sideways' || marketState.trendDirection === 'bullish') &&
            normalizedPosition < 0.4
        ) {
            for (let i = 1; i <= tradingConfig.GRID_SIZE; i++) {
                const longEntryPrice = price - gridStep * i;
                const exists = [...tradingState.pendingOrders, ...tradingState.acceptedOrders].some(
                    (order) => order.type === 'long' && Math.abs(order.entryPrice - longEntryPrice) < 1e-6,
                );

                if (!exists) {
                    const order = createOrder('long', longEntryPrice, gridStep, dynamicAmount, simulationTime);
                    if (tradingState.availableBalance >= order.margin) {
                        tradingState.availableBalance -= order.margin;
                        tradingState.pendingOrders.push(order);
                        console.log(
                            `Í∑∏Î¶¨Îìú Î°± Ï£ºÎ¨∏ ÏÉùÏÑ±: ID ${order.id}, ÏßÑÏûÖÍ∞Ä ${order.entryPrice.toFixed(2)} USDT, Ï£ºÎ¨∏ÏàòÎüâ: ${order.amount.toFixed(4)}, Í∞ÄÏö©ÏûîÏï°: ${tradingState.availableBalance.toFixed(2)} USDT`,
                        );
                    }
                }
            }
        }

        // Ïàè Ï£ºÎ¨∏ Î∞∞Ïπò
        if (
            (marketState.trendDirection === 'sideways' || marketState.trendDirection === 'bearish') &&
            normalizedPosition > 0.6
        ) {
            for (let i = 1; i <= tradingConfig.GRID_SIZE; i++) {
                const shortEntryPrice = price + gridStep * i;
                const exists = [...tradingState.pendingOrders, ...tradingState.acceptedOrders].some(
                    (order) => order.type === 'short' && Math.abs(order.entryPrice - shortEntryPrice) < 1e-6,
                );

                if (!exists) {
                    const order = createOrder('short', shortEntryPrice, gridStep, dynamicAmount, simulationTime);
                    if (tradingState.availableBalance >= order.margin) {
                        tradingState.availableBalance -= order.margin;
                        tradingState.pendingOrders.push(order);
                        console.log(
                            `Í∑∏Î¶¨Îìú Ïàè Ï£ºÎ¨∏ ÏÉùÏÑ±: ID ${order.id}, ÏßÑÏûÖÍ∞Ä ${order.entryPrice.toFixed(2)} USDT, Ï£ºÎ¨∏ÏàòÎüâ: ${order.amount.toFixed(4)}, Í∞ÄÏö©ÏûîÏï°: ${tradingState.availableBalance.toFixed(2)} USDT`,
                        );
                    }
                }
            }
        }

        console.log(`Ï£ºÎ¨∏ Î∞∞ÏπòÌïòÏßÄ ÏïäÏùå(${marketState.trendDirection}, ${normalizedPosition})`);
        
    } catch (error) {
        console.error('Í∑∏Î¶¨Îìú Ï£ºÎ¨∏ ÏÉùÏÑ± ÏóêÎü¨:', error);
    }
};

export const updateOrders = (simPrice: number): void => {
    try {
        if (!simPrice) return;

        // ÎåÄÍ∏∞ Ï£ºÎ¨∏ Ï≤òÎ¶¨
        const stillPending: Order[] = [];
        for (const order of tradingState.pendingOrders) {
            if (order.status === 'pending') {
                if (order.type === 'long' && simPrice <= order.entryPrice) {
                    order.status = 'open';
                    order.filledPrice = simulateSlippage(order);
                    tradingState.acceptedOrders.push(order);
                    console.log(`üü¢ Î°± Ï£ºÎ¨∏ Ï†ëÏàò: ID ${order.id}, Ï≤¥Í≤∞Í∞Ä ${order.filledPrice.toFixed(2)} USDT`);
                } else if (order.type === 'short' && simPrice >= order.entryPrice) {
                    order.status = 'open';
                    order.filledPrice = simulateSlippage(order);
                    tradingState.acceptedOrders.push(order);
                    console.log(`üî¥ Ïàè Ï£ºÎ¨∏ Ï†ëÏàò: ID ${order.id}, Ï≤¥Í≤∞Í∞Ä ${order.filledPrice.toFixed(2)} USDT`);
                } else {
                    stillPending.push(order);
                }
            }
        }
        tradingState.pendingOrders = stillPending;

        // ÌôúÏÑ± Ï£ºÎ¨∏ Ï≤òÎ¶¨
        const stillAccepted: Order[] = [];
        for (const order of tradingState.acceptedOrders) {
            if (order.status === 'open') {
                if (order.type === 'long' && simPrice >= order.targetExitPrice) {
                    const profit = (order.targetExitPrice - order.filledPrice) * order.amount * tradingConfig.LEVERAGE;
                    const fee = order.targetExitPrice * order.amount * (tradingConfig.TRADING_FEE_PERCENT / 100);
                    const netProfit = profit - fee;
                    tradingState.realizedPnL += netProfit;
                    tradingState.availableBalance += order.margin + netProfit;
                    order.status = 'closed';
                    tradingState.closedOrders.push(order);
                    console.log(
                        `üî¥ Î°± Ï≤≠ÏÇ∞: ID ${order.id}, Ï≤≠ÏÇ∞Í∞Ä ${order.targetExitPrice.toFixed(2)} USDT, Ï∞®Ïùµ: ${netProfit.toFixed(2)} USDT, Í∞ÄÏö©ÏûîÏï°: ${tradingState.availableBalance.toFixed(2)} USDT`,
                    );
                } else if (order.type === 'short' && simPrice <= order.targetExitPrice) {
                    const profit = (order.filledPrice - order.targetExitPrice) * order.amount * tradingConfig.LEVERAGE;
                    const fee = order.targetExitPrice * order.amount * (tradingConfig.TRADING_FEE_PERCENT / 100);
                    const netProfit = profit - fee;
                    tradingState.realizedPnL += netProfit;
                    tradingState.availableBalance += order.margin + netProfit;
                    order.status = 'closed';
                    tradingState.closedOrders.push(order);
                    console.log(
                        `üü¢ Ïàè Ï≤≠ÏÇ∞: ID ${order.id}, Ï≤≠ÏÇ∞Í∞Ä ${order.targetExitPrice.toFixed(2)} USDT, Ï∞®Ïùµ: ${netProfit.toFixed(2)} USDT, Í∞ÄÏö©ÏûîÏï°: ${tradingState.availableBalance.toFixed(2)} USDT`,
                    );
                } else {
                    stillAccepted.push(order);
                }
            }
        }
        tradingState.acceptedOrders = stillAccepted;
        tradingState.totalBalance = tradingState.availableBalance;
    } catch (error) {
        console.error('Ï£ºÎ¨∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏóêÎü¨:', error);
    }
};

export const cancelStaleOrders = (simulationTime: number): void => {
    const stillPending: Order[] = [];
    for (const order of tradingState.pendingOrders) {
        if (simulationTime - order.createdTime > tradingConfig.MAX_PENDING_TIME) {
            tradingState.availableBalance += order.margin;
            order.status = 'cancelled';
            tradingState.closedOrders.push(order);
            console.log(
                `‚è∞ ÎØ∏Ï≤¥Í≤∞ Ï£ºÎ¨∏ Ï∑®ÏÜå: ID ${order.id}, ÏÉùÏÑ±ÏãúÍ∞Å: ${new Date(order.createdTime).toISOString()}, Í∞ÄÏö©ÏûîÏï°: ${tradingState.availableBalance.toFixed(2)} USDT`,
            );
        } else {
            stillPending.push(order);
        }
    }
    tradingState.pendingOrders = stillPending;
};

export const cancelAllOrders = (): void => {
    const allActiveOrders = [...tradingState.pendingOrders, ...tradingState.acceptedOrders];
    for (const order of allActiveOrders) {
        tradingState.availableBalance += order.margin;
        order.status = 'cancelled';
        tradingState.closedOrders.push(order);
    }
    tradingState.pendingOrders = [];
    tradingState.acceptedOrders = [];
    tradingState.totalBalance = tradingState.availableBalance;
    console.log(`Î™®Îì† ÎØ∏Ï≤¥Í≤∞ Ï£ºÎ¨∏ Ï∑®ÏÜåÎê®. Ï†ÑÏ≤¥ ÏûîÏï°: ${tradingState.totalBalance.toFixed(2)} USDT`);
};
